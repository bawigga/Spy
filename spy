#!/usr/bin/env python
import optparse
import os
import subprocess
import time
import logging
import stat

VERSION = "0.1"
COPYRIGHT = "Copyright 2011 Brian Wigginton.\n"


def main():
    parser = optparse.OptionParser(usage="%prog [OPTIONS] [WATCH]", version="%prog " + VERSION + '\n\n' + COPYRIGHT)

    # add options
    parser.add_option("-c", "--clear", action="store_true", default=False, dest="clear_screen", help="clear the screen after each execution")
    parser.add_option("-e", "--exec", dest="command", help="path to the program to execute")
    parser.add_option("-i", "--interval", type="int", default="1", dest="interval", help="(in seconds) set the time interval to check for file modifications")
    parser.add_option("--debug", action="store_true", default=False, dest="debug", help="enable debug output")

    # parse options
    (options, args) = parser.parse_args()

    # debug output
    if(options.debug):
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("options: %s", options)
        logging.debug("args: %s", args)
  
    # safety checks
    if len(args) != 1:
        parser.print_help()
        exit(-1)
        #parser.error("incorrect number of arguments")

    # Get's the last modified time of the file to watch
    def getModificationTime():
        logging.debug("Checking modiification time for %s", args[0])
        return os.stat(args[0]).st_mtime

    # Executes the desired command
    def runCommand(cmd):

        if options.clear_screen:
            logging.debug("Clearing screen")
            subprocess.call(["clear"])

        # if we're executing a file make sure it's actually executable
        if os.path.isfile(cmd) and 64 != stat.S_IXUSR & os.stat(cmd)[stat.ST_MODE]:
          logging.warning("Can't execute: %s", cmd)
          exit()
        
        # make sure we have a list
        if not isinstance(cmd, list):
          cmd = cmd.split()
  
        logging.debug(cmd)

        return subprocess.call(cmd)

    # main loop
    def loop():
        cmd = options.command if options.command else args[0]
        runCommand(cmd)

        global data
        data = getModificationTime()
        run = True

        while run:
            try:
                time.sleep(options.interval)
                newData = getModificationTime()
                if data != newData:
                    data = newData
                    runCommand(cmd)
            except KeyboardInterrupt:
                run = False

    loop()

if __name__ == '__main__':
    main()
